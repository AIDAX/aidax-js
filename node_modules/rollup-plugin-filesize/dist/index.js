'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fileSize = _interopDefault(require('filesize'));
var boxen = _interopDefault(require('boxen'));
var colors = _interopDefault(require('colors'));
var deepAssign = _interopDefault(require('deep-assign'));
var gzip = _interopDefault(require('gzip-size'));

function render(opt, size, gzip$$1, bundle) {
	var primaryColor = opt.theme === "dark" ? "green" : "black";
	var secondaryColor = opt.theme === "dark" ? "yellow" : "blue";

	return boxen("" + (bundle.dest ? colors[primaryColor].bold("Destination: ") + colors[secondaryColor](bundle.dest) + "\n" : "") + colors[primaryColor].bold("Bundle size: ") + colors[secondaryColor](size) + (opt.showGzippedSize ? ", " + colors[primaryColor].bold("Gzipped size: ") + colors[secondaryColor](gzip$$1) : ""), { padding: 1 });
}

function filesize() {
	var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var defaultOptions = {
		format: {},
		theme: "dark",
		render: render,
		showGzippedSize: true
	};

	var opts = deepAssign({}, defaultOptions, options);
	if (options.render) {
		opts.render = options.render;
	}

	return {
		getData: function getData(bundle, code) {
			var size = fileSize(Buffer.byteLength(code), opts.format);
			var gzipSize = opts.showGzippedSize ? fileSize(gzip.sync(code), opts.format) : "";
			return opts.render(opts, size, gzipSize, bundle);
		},
		ongenerate: function ongenerate(bundle, _ref) {
			var code = _ref.code;

			console.log(this.getData(bundle, code));
		}
	};
}

module.exports = filesize;
